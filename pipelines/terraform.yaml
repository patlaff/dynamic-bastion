parameters:
- name: env
  type: string
- name: terraformCmd
  type: string

variables:
# Assign terraform variables
- name: location
  value: 'eastus2'
# Assign pipeline-specific variables
- name: azureServiceConnection
  value: 'svc_appdev_mktg_web_${{ parameters.env }}_SC'
- name: vmImageName
  value: 'windows-latest'
- name: TF_VERSION
  value: '1.4.6'

stages:

- stage: Setup

  jobs:
  - job: TFRemoteStateConfig
    displayName: Create, if not exists, Storage Account for Remote TF State
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - bash: |
        . backends/${{ parameters.env }}.conf
        echo "##vso[task.setvariable variable=resource_group_name;isoutput=true;]$resource_group_name"
        echo "##vso[task.setvariable variable=storage_account_name;isoutput=true;]$storage_account_name"
        echo "##vso[task.setvariable variable=container_name;isoutput=true;]$container_name"
        echo "##vso[task.setvariable variable=key;isoutput=true;]$key"
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      name: vars
      displayName: Dot-source backend vars from conf file

    - task: AzureCLI@2
      name: checkForStorageAccount
      displayName: 'Azure CLI - Check if Storage Account Exists'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          exists='true'
          az storage account show --resource-group $(vars.resource_group_name) --name $(vars.storage_account_name) || exists='false'
          echo "##vso[task.setvariable variable=storageExists;]$exists"

    - task: AzureCLI@2
      name: createStorageAccount
      displayName: 'Azure CLI - Create Storage Account If Not Exists'
      condition: eq(variables.storageExists, 'false')
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --location $(location) --name $(vars.resource_group_name)
          az storage account create --name $(vars.storage_account_name) --resource-group $(vars.resource_group_name) --location $(location) --sku Standard_LRS 
          az storage container create --name $(vars.container_name) --account-name $(vars.storage_account_name)


- stage: Infrastructure
  dependsOn: Setup
  condition: succeeded()
  displayName: Infrastructure Deploy Stage

  jobs:
  - job: Terraform
    displayName: Terraform

    variables:
      TF_IN_AUTOMATION: true
      backendAzureRmResourceGroupName: $[ stageDependencies.Setup.TFRemoteStateConfig.outputs['vars.resource_group_name'] ]
      backendAzureRmStorageAccountName: $[ stageDependencies.Setup.TFRemoteStateConfig.outputs['vars.storage_account_name'] ]
      backendAzureRmContainerName: $[ stageDependencies.Setup.TFRemoteStateConfig.outputs['vars.container_name'] ]
      backendAzureRmKey: $[ stageDependencies.Setup.TFRemoteStateConfig.outputs['vars.key'] ]
      
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform Installer'
      inputs:
        terraformVersion: $(TF_VERSION)

    - task: TerraformTaskV2@2
      name: terraformInit
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-input=false'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'

    - task: TerraformTaskV2@2
      name: terraformPlan
      displayName: 'Terraform plan'
      condition: eq('${{ parameters.terraformCmd }}', 'plan')
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-var-file="vars/${{ parameters.env }}.tfvars"'
        environmentServiceNameAzureRM: $(azureServiceConnection)
      env: 
        TF_VAR_rg_name: $(backendAzureRmResourceGroupName)

    - task: TerraformTaskV2@2
      name: terraformApply
      displayName: 'Terraform apply VMs'
      condition: eq('${{ parameters.terraformCmd }}', 'apply')
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-auto-approve -var-file="vars/${{ parameters.env }}.tfvars" -target="module.windows-vms" -target="module.linux-vms"'
        environmentServiceNameAzureRM: $(azureServiceConnection)
      env: 
        TF_VAR_rg_name: $(backendAzureRmResourceGroupName)

    - task: TerraformTaskV2@2
      name: terraformApply
      displayName: 'Terraform apply all'
      condition: eq('${{ parameters.terraformCmd }}', 'apply')
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-auto-approve -var-file="vars/${{ parameters.env }}.tfvars"'
        environmentServiceNameAzureRM: $(azureServiceConnection)
      env: 
        TF_VAR_rg_name: $(backendAzureRmResourceGroupName)
      
    - task: TerraformTaskV2@2
      name: terraformPlanDestroy
      displayName: 'Terraform plan-destroy'
      condition: eq('${{ parameters.terraformCmd }}', 'plan-destroy')
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-destroy -var-file="vars/${{ parameters.env }}.tfvars"'
        environmentServiceNameAzureRM: $(azureServiceConnection)
      env: 
        TF_VAR_rg_name: $(backendAzureRmResourceGroupName)

    - task: TerraformTaskV2@2
      name: terraformDestroy
      displayName: 'Terraform destroy'
      condition: eq('${{ parameters.terraformCmd }}', 'destroy')
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-auto-approve -var-file="vars/${{ parameters.env }}.tfvars"'
        environmentServiceNameAzureRM: $(azureServiceConnection)
      env: 
        TF_VAR_rg_name: $(backendAzureRmResourceGroupName)

    - powershell: |
        $terraformOutput = Get-Content "$(terraformApply.jsonOutputVariablesPath)" | ConvertFrom-Json
        $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
      name: terraformOutput
      displayName: Read terraform outputs
      condition: eq('${{ parameters.terraformCmd }}', 'apply')
